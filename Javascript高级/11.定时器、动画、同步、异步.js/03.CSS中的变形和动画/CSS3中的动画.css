/* 
* 1. CSS中的变形属性：transform,改变元素的样式（
*  优势：开启了硬件加速， 比传统的样式性能流畅一些
*  特点：基于transform变形的元素，相当于脱离文档流，对其余元素的位置不会产生影响
*   + scale（N）  缩放
*   + translate(X,Y) 位移  translate3d(X,Y,Z)/translateX/translateY/translateZ
*   + rotate(Ndeg) 旋转N度  rotateX/rotateY
*   + skew(Ndeg) 倾斜N度
*   + matrix 矩阵变形   matrix3d
*/

  /* margin: 20px auto; */

.imgBox{
  display: block;
  margin: 10px;
  width: 400px;
  height: 300px;

  transform:scale(2);
  /* z-index:-1;   //没有用的，只对定位元素才起作用 */
} 
  /* transform: scale(0.5) rotate(180deg) skew(-45deg); */
  /* transform: translate(200px,200x); */
/* .box{
   margin: 10px;
   width: 400px;
   height: 300px;
   background: lightblue;
} */

/* 2.CSS3中的过渡动画；transition
*  :给元素设置过渡效果，当元素的样式在某种情况下发生改变了，不是立即改变，而是按照指定的效果慢慢的去改变，从而实现动画效果
*  + transition-property:设置过渡的样式属性（哪些样式会执行过渡效果），默认是all,元素所有的样式改变都会执行过渡效果 
*  + transition-druation: 动画运行的时间 ms/s
*  + transition-timing-function: 运行的方式，linear默认值“匀速运动”、ease、ease-in、ease-out、ease-in-out、 cubi-besizer.....
*  + transition-delay:设置延迟时间，默认值0s"立即执行"
*/
/* .imgBox { */
  /* 设置过渡效果 */
  /* transition: all 1s linear 0s; */
  /* transition: filter 1s linear 0s;  */
  /* transition: all 1s ease 0s;  */
  /* transition: all .2s linear 0s;  == transition: .2s; */
   /* //控制滤镜变化才会走这个效果 */

/* } */
/* .imgBox:hover{
  transform:scale(0.5);
  -webkit-filter: invert(1);
  -webkit-filter: grayscale(1);
} */
/* document.body.style.filter = " grayscale(1)"  让网页变成灰色*/


/* 3.CSS3中的帧动画：animation
*   3-1.制作运动的轨迹（每一帧元素的样式）@keyframes
*        语法： @keyframes 动画名{
                    0%或者from{第一帧的样式}
                    ....
                    50%{中间某帧的样式}
                    ...
                    100%或者to{最后一帧的样式}
                }
*   3-2.播放动画（按照轨迹运动）animation
*       + animation-name:动画名
*       + animation-duration:播放时间
*       + animation-timing-function:运动方式，默认ease
*       + animation-delay:延迟时间，默认0s
*       + animation-iteration-count: 播放次数，默认1，infinite无限次数播放
*       + animation-fill-mode:控制运动状态
*            + forwards:animation动画，元素运动完，默认会返回第一帧所在的位置，如果设置了这个属性，则运动完停留在最后一帧的位置
*            + backwards:在动画设置延迟时间的情况下，我们让元素在第一帧的位置等待运行
*            + both:同时具备以上两个特点
*/
@keyframes AAA {
  0%{
    transform: translate(0,0);
  }
  25%{
    transform: translate(800px,0);
  }
  50%{
    transform: translate(800px,400px);
  }
  75%{
    transform: translate(0,400px);
  }
  /* 100%{
    transform: translate(800PX,0);
  } */
}
 .imgBox{
  animation: AAA 1s linear infinite 1s both;
} 
/* 
npm init -y j
npm i animate.css */
/* link引入 */